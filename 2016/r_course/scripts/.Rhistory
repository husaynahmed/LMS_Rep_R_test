JustIkaros <- !(reslist4[,"IkAndMyc"] | reslist4[,"Myc"]) & reslist4[,"Ik"]
JustMyc <- !(reslist4[,"IkAndMyc"] | reslist4[,"Ik"]) & reslist4[,"Myc"]
JustIkaros == JustMyc
(reslist4[,"IkAndMyc"] | reslist4[,"Myc"])
!(reslist4[,"IkAndMyc"] | reslist4[,"Myc"])
reslist4[,"Ik"]
!(reslist4[,"IkAndMyc"] | reslist4[,"Myc"]) & reslist4[,"Ik"]
!(reslist4[,"IkAndMyc"] | reslist4[,"Ik"]) & reslist4[,"Myc"]
!(reslist4[,"IkAndMyc"] | reslist4[,"Myc"]) & reslist4[,"Ik"]
!(reslist4[,"IkAndMyc"] | reslist4[,"Ik"]) & reslist4[,"Myc"]
!(reslist4[,"IkAndMyc"] | reslist4[,"Myc"]) & reslist4[,"Ik"]
!(reslist4[,"IkAndMyc"] | reslist4[,"Ik"]) & reslist4[,"Myc"]
JustIkaros & JustMyc
any(JustIkaros & JustMyc)
JustIkaros <- !(reslist4[,"IkAndMyc"] | reslist4[,"Myc"]) & reslist4[,"Ik"]
JustMyc <- !(reslist4[,"IkAndMyc"] | reslist4[,"Ik"]) & reslist4[,"Myc"]
MycAndIkaros <- reslist4[,"IkAndMyc"] | (reslist4[,"Ik"] & reslist4[,"Myc"])
any(JustIkaros & JustMyc)
any(JustIkaros & MycAndIkaros)
rep("NotTarget",nrow(reslist4))
reslist3 <- vector("list",length=9)
reslist2 <- reslist[c(2,3,1,6,8,4,11,12,10)]
for(j in seq(1,9)){
temp1 <- gsub("_BatchCorrected_edgeR_WithoutIntercept.txt","",(names(reslist2)[j]))
reslist3[[j]] <- cbind(reslist2[[j]],reslist2[[j]][,1] %in% IkAndMycPeakedGenes,reslist2[[j]][,1] %in% IkNotMycPeakedGenes,reslist2[[j]][,1] %in% MycNotIkarosPeakedGenes,gsub("[0-9]+|vsEMP","",temp1),gsub("\\D|vs.*","",temp1))
colnames(reslist3[[j]]) <- c(colnames(reslist3[[j]])[-c(8:12)],c("IkAndMyc","Ik","Myc","OE","Time"))
}
reslist4 <- do.call(rbind,reslist3)
JustIkaros <- !(reslist4[,"IkAndMyc"] | reslist4[,"Myc"]) & reslist4[,"Ik"]
JustMyc <- !(reslist4[,"IkAndMyc"] | reslist4[,"Ik"]) & reslist4[,"Myc"]
MycAndIkaros <- reslist4[,"IkAndMyc"] | (reslist4[,"Ik"] & reslist4[,"Myc"])
temp7 <- rep("NotTarget",nrow(reslist4))
temp7[JustIkaros] <- "JustIkaros"
temp7[JustMyc] <- "JustMyc"
temp7[MycAndIkaros] <- "MycAndIkaros"
temp8 <- data.frame(reslist4,target=temp7)
any(JustIkaros & MycAndIkaros)
temp8[1:10,]
temp8[1:3,]
p <- ggplot(subset(as.data.frame(temp8),FDR < 0.05), aes(factor(Time), logFC))
p + geom_violin()+facet_grid(OE~target)
install.packages("~/Downloads/TFBSTools_1.4.0.zip", repos = NULL, lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(TFBSTools)
sessionInfo()
detach("package:TFBSTools", unload=TRUE)
install.packages("~/Downloads/TFBSTools_1.4.0.zip", repos = NULL, lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(TFBSTools)
sessionInfo()
detach("package:TFBSTools", unload=TRUE)
install.packages("~/Downloads/TFBSTools_1.4.0.tar.gz", repos = NULL, type = "source", lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("~/Downloads/TFBSTools_1.4.0.zip", repos = NULL, lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
remove.packages("TFBSTools", lib="~/Library/R/3.1/library")
remove.packages("TFBSTools", lib="~/Library/R/3.1/library")
install.packages("~/Downloads/TFBSTools_1.4.0.zip", repos = NULL, lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("TFBSTools", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
remove.packages("TFBSTools", lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("~/Downloads/TFBSTools_1.4.0.tgz", repos = NULL, lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("TFBSTools", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
detach("package:TFBSTools", unload=TRUE)
library("TFBSTools", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
detach("package:TFBSTools", unload=TRUE)
remove.packages("TFBSTools", lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
source("http://bioconductor.org/biocLite.R")
biocLite("TFBSTools")
library(tracktables)
load("~/Downloads/resFull.RData")
?biplot
biplot.princomp
princomp:::biplot
stats:::biplot
stats:::biplot.princomp
pcaRes <- prcomp(t(rlogResMat))
pcaRes <- princomp(rlogResMat)
stats:::biplot.princomp(pcaRes)
?biplot
apply(rlogResMat,1,var)
sort(apply(rlogResMat,1,var))
sort(apply(rlogResMat,1,var),cdereasing=F)
sort(apply(rlogResMat,1,var),decreasing=F)
sort(apply(rlogResMat,1,var),decreasing=T)
names(sort(apply(rlogResMat,1,var),decreasing=T)[1:500])
names(sort(apply(rlogResMat,1,var),decreasing=T)[1:1000])
rownames(rlogResMat)
pcaRes <- princomp(rlogResMat[rownames(rlogResMat) %in% names(sort(apply(rlogResMat,1,var),decreasing=T)[1:1000])])
plot(pcaRes$x)
plot(pcaRes$x)
pcaRes <- prcomp(rlogResMat[rownames(rlogResMat) %in% names(sort(apply(rlogResMat,1,var),decreasing=T)[1:1000])])
plot(pcaRes$x)
plot(pcaRes$X)
plot(pcaRes)
pcaRes <- prcomp(rlogResMat[rownames(rlogResMat) %in% names(sort(apply(rlogResMat,1,var),decreasing=T)[1:1000]),])
plot(pcaRes$X)
plot(pcaRes$x)
plot(pcaRes$rotation)
plot(pcaRes$rotation,col=factor(colData(dds)))
library(Desseq)
library(DEseq)
library(DESeq)
plot(pcaRes$rotation,col=factor(colData(dds)))
library(DESeq2)
plot(pcaRes$rotation,col=factor(colData(dds)))
colData(dds)
GRanges()
sampleSheet
filteredSampleSheet
plot(pcaRes$rotation,col=factor(filteredSampleSheet$Treatment)
)
plot(pcaRes$rotation,col=factor(filteredSampleSheet$Genotype)
)
plot(pcaRes$rotation[,1:3],col=factor(filteredSampleSheet$Genotype)
)
plot(pcaRes$rotation[,c(1,3)],col=factor(filteredSampleSheet$Genotype)
)
biplot(pcaRes)
plot(pcaRes$rotation[,c(1,3)],col=factor(filteredSampleSheet$Genotype,xlim=c(0,10))
)
plot(pcaRes$rotation[,c(1,3)],col=factor(filteredSampleSheet$Genotype),xlim=c(0,10))
biplot(pcaRes)
biplot(pcaRes,xlim=c(0,0.10),xlim=c(0.05,0.05))
biplot(pcaRes,xlim=c(0,0.10),ylim=c(0.05,0.05))
stats:::biplot.princomp
library(DESeq2)
install.packages("FactoMineR")
stats:::biplot.princomp
library(FactoMineR)
pcaRes <- princomp(rlogResMat[rownames(rlogResMat) %in% names(sort(apply(rlogResMat,1,var),decreasing=T)[1:5000])])
plot(pcaRes$rotation,col=factor(colData(dds)))
plot(pcaRes$rotation,col=factor(filteredSampleSheet$Treatment)
)
plot(pcaRes$rotation[,c(1,3)],col=factor(filteredSampleSheet$Genotype))
plot(pcaRes$rotation,col=factor(filteredSampleSheet$Treatment))
pcaRes
pcaRes <- prcomp(rlogResMat[rownames(rlogResMat) %in% names(sort(apply(rlogResMat,1,var),decreasing=T)[1:5000])])
plot(pcaRes$rotation,col=factor(filteredSampleSheet$Treatment))
plot(pcaRes$rotation[,c(1,3)],col=factor(filteredSampleSheet$Treatment))
pcaRes <- prcomp(rlogResMat[rownames(rlogResMat) %in% names(sort(apply(rlogResMat,1,var),decreasing=T)[1:5000])])
plot(pcaRes$x[,c(1,3)],col=factor(filteredSampleSheet$Treatment))
pcaRes <- prcomp(rlogResMat[rownames(rlogResMat) %in% names(sort(apply(rlogResMat,1,var),decreasing=T)[1:5000]),])
plot(pcaRes$x[,c(1,3)],col=factor(filteredSampleSheet$Treatment))
plot(pcaRes$rotation[,c(1,3)],col=factor(filteredSampleSheet$Treatment))
plot(pcaRes$rotation[,c(1,2)],col=factor(filteredSampleSheet$Treatment))
pcaRes <- prcomp(rlogResMat)
plot(pcaRes$rotation[,c(1,2)],col=factor(filteredSampleSheet$Treatment))
pcaRes <- prcomp(rlogResMat)
plot(pcaRes$rotation[,c(1,2)],col=factor(filteredSampleSheet$Treatment))
pcaRes <- prcomp(t(rlogResMat))
plot(pcaRes$x,col=factor(filteredSampleSheet$Treatment))
results <- PCA(rlogResMat)
plot(pcaRes$x,col=factor(filteredSampleSheet$Treatment))
plot(pcaRes$rotations)
plot(pcaRes$rotation)
plot(pcaRes$x,col=factor(filteredSampleSheet$Genotype))
pcaRes$x
rlogResMat[rownames(rlogResMat) %in% "ENSMUSG00000022314",]
pcaRes$x[,2]
cbind(pcaRes$x[,2],rlogResMat[rownames(rlogResMat) %in% "ENSMUSG00000022314",])
plot(pcaRes$rotation)
plot(pcaRes$rotation[rownames(pcaRes$rotation) %in% "ENSMUSG00000022314",c(1,2)])
plot(pcaRes$rotation[rownames(pcaRes$rotation) %in% "ENSMUSG00000022314",c(1,2),drop=F])
plot(pcaRes$rotation)
point(pcaRes$rotation[rownames(pcaRes$rotation) %in% "ENSMUSG00000022314",c(1,2),drop=F])
points(pcaRes$rotation[rownames(pcaRes$rotation) %in% "ENSMUSG00000022314",c(1,2),drop=F])
points(pcaRes$rotation[rownames(pcaRes$rotation) %in% "ENSMUSG00000022314",c(1,2),drop=F],cex=3,col="red")
plot(pcaRes$x,col=factor(filteredSampleSheet$Genotype))
plot(pcaRes$x[,c(1,2)],col=factor(filteredSampleSheet$Genotype))
plot(pcaRes$x[,c(1,3)],col=factor(filteredSampleSheet$Genotype))
plot(pcaRes$x[,c(1,4)],col=factor(filteredSampleSheet$Genotype))
plot(pcaRes$x[,c(1,4)],col=factor(filteredSampleSheet$Treatment))
plot(pcaRes$x[,c(2,4)],col=factor(filteredSampleSheet$Treatment))
plot(pcaRes$x[,c(1,4)],col=factor(filteredSampleSheet$Treatment))
plot(pcaRes$x[,c(2,4)],col=factor(filteredSampleSheet$Treatment))
plot(pcaRes$x[,c(2,4)],col=factor(filteredSampleSheet$Genotype))
plot(pcaRes$x[,c(2,4)],col=factor(filteredSampleSheet$Treatment))
plot(pcaRes$x[,c(2,4)],col=factor(filteredSampleSheet$Time))
plot(pcaRes$x[,c(2,5)],col=factor(filteredSampleSheet$Time))
plot(pcaRes$x[,c(2,5)],col=factor(filteredSampleSheet$Treatment))
plot(pcaRes$x[,c(2,5)],col=factor(filteredSampleSheet$Genotype))
plot(pcaRes$x[,c(2,5)],col=factor(filteredSampleSheet$Genotype),pch=cfactor(filteredSampleSheet$Treatment))
plot(pcaRes$x[,c(2,5)],col=factor(filteredSampleSheet$Genotype),pch=factor(filteredSampleSheet$Treatment))
plot(pcaRes$x[,c(2,5)],col=factor(filteredSampleSheet$Genotype),pch=factor(filteredSampleSheet$Treatment))
plot(pcaRes$x[,c(2,5)],col=factor(filteredSampleSheet$Genotype))
plot(pcaRes$x[,c(2,5)],col=factor(filteredSampleSheet$Genotype)pch=as.numeric(factor(filteredSampleSheet$Treatment)))
plot(pcaRes$x[,c(2,5)],col=factor(filteredSampleSheet$Genotype),pch=as.numeric(factor(filteredSampleSheet$Treatment)))
factor(filteredSampleSheet$Treatment)
x
x <- 1
x++
x
x+=
x=+
1
i <- 0
x <- 1:10
while(x != 3){
message(x[i])
x <- x+1
}
i <- 0
x <- 1
while(x != 3){
message(x[i])
x <- x+1
}
message("Finally x is 3")
For loops
=====
For loops allow the user to cycle through a range of values applying an operation for every value.
.
```{r}
x <- 1:10
for(i in x){
message(i)
}
```
x <- 1:10
y <- letter[1:10]
x <- 1:10
y <- letters[1:10]
y
x <- sample(1:24,10)
y <- letters
x
x <- sample(1:24,10)
y <- letters
1:length(x)
for(i in 1:length(x)){
message("The ",i," number in x is ",x[i])
message("The ",x[i]," in the alphabet is "y[x])
}
x <- sample(1:24,10)
y <- letters
1:length(x)
for(i in 1:length(x)){
message("The ",i," number in x is ",x[i])
message("The ",x[i]," in the alphabet is ",y[x])
}
x <- sample(1:24,10)
y <- letters
1:length(x)
for(i in 1:length(x)){
message("The ",i," number in x is ",x[i])
message("The ",i," in the alphabet is ",y[i])
}
break
x <- 1:13
for(i in 1:13){
if(i > 10){
message("Number ",i," is greater than 10")
}else if(i == 10){
message("Number ",i," is  10")
}else{
message("Number ",i," is less than  10")
}
}
break
?break
x <- 1:13
for(i in 1:13){
if(i < 10){
message("Number ",i," is greater than 10")
}else if(i == 3){
message("Number ",i," is  10")
break
}
message("loop is done")
)
x <- 1:13
for(i in 1:13){
if(i < 10){
message("Number ",i," is greater than 10")
}else if(i == 3){
message("Number ",i," is  10")
break
}
}
message("loop is done")
for(i in 1:13){
if(i < 10){
message("Number ",i," is less than 10")
}else if(i == 10){
message("Number ",i," is  10")
break
}
}
months
month
months()
month
days
day
data(mtcars)
x=rnorm(100,70,10)
y <- jitter(x,amount=40)+20
lmExample <- data.frame(X=x,Y=y)
mean(x)
sum(x)
lm(X~Y,data=lmExample)
plot(X~Y,data=lmExample)
lm()
x=rnorm(100,70,10)
y <- jitter(x,amount=10)+20
mean(x)
lmExample <- data.frame(X=x,Y=y)
lmResult <- lm(Y~X,data=lmExample)
lmResult
summary(lmResult)
x=rnorm(100,70,10)
y <- jitter(x,amount=1)+20
mean(x)
lmExample <- data.frame(X=x,Y=y)
lmResult <- lm(Y~X,data=lmExample)
lmResult
summary(lmResult)
x=rnorm(100,70,10)
y <- jitter(x,amount=10)+200
mean(x)
lmExample <- data.frame(X=x,Y=y)
lmResult <- lm(Y~X,data=lmExample)
summary(lmResult)
x=rnorm(100,70,10)
y <- jitter(x,amount=20)+200
mean(x)
lmExample <- data.frame(X=x,Y=y)
lmResult <- lm(Y~X,data=lmExample)
summary(lmResult)
**Function_name** <- function(**Argument**){ **Expression**}
stop
myFirstFunction <- function(myArgument1,myArgument2){
if(is.missing(myArgument1) | is.missing(myArgument2)){
message("Need two arguments")
}
myResult <- (myArgument1*myArgument2)
return(myResult)
}
myFirstFunction(4,5)
missing
myFirstFunction <- function(myArgument1,myArgument2){
if(missing(myArgument1) | missing(myArgument2)){
message("Need two arguments")
}
myResult <- (myArgument1*myArgument2)
return(myResult)
}
myFirstFunction(4,5)
myFirstFunction(4,5)
myFirstFunction(4)
myFirstFunction <- function(myArgument1,myArgument2){
if(missing(myArgument1) | missing(myArgument2)){
message("Need two arguments")
stop
}
myResult <- (myArgument1*myArgument2)
return(myResult)
}
myFirstFunction(4,5)
myFirstFunction(4)
myFirstFunction <- function(myArgument1,myArgument2){
if(missing(myArgument1) | missing(myArgument2)){
warning("Need two arguments")
}
myResult <- (myArgument1*myArgument2)
return(myResult)
}
myFirstFunction(4,5)
myFirstFunction(4)
myFirstFunction <- function(myArgument1,myArgument2){
if(missing(myArgument1) | missing(myArgument2)){
error("Need two arguments")
}
myResult <- (myArgument1*myArgument2)
return(myResult)
}
myFirstFunction(4,5)
myFirstFunction(4)
mySecondFunction <- function(myArgument1,myArgument2=10){
myResult <- (myArgument1*myArgument2)
return(myResult)
}
mySecondFunction(4,5)
mySecondFunction(4)
g
missing(g)
myforthFunction <- function(myArgument1,myArgument2=10){
myResult <- (myArgument1*myArgument2)
return(myResult)
print("I returned the result")
}
myfifthFunction <- function(myArgument1,myArgument2=10){
(myArgument1*myArgument2)
}
myforthFunction(4,5)
myfifthFunction(4,5)
missing(g)
time
time()
time(3)
data()
date()
getwd()
dir()
getwd()
dir()
factorial(7)
factorial(6)
is.integer(2)
colSums
rand(4)
sample(100,1)
sample(100,1)
sample(10000,1)
dir()
getwd()
x <- sample(10000,1)
x
x <- sample(1000,10^6)
x <- sample(1000,10^6,replace=T)
x <- sample(1000,10^7,replace=T)
x <- sample(1000,10^8,replace=T)
setwd("~/Downloads/htqc/r_course")
render("scripts/script.r")
library(rmarkdown)
render("scripts/script.r")
render("scripts/script.r")
filesToRead <- dir("../ExpressionResults/",pattern = "*\\.txt",full.names=T)
fileRead <- vector("list",length=length(filesToRead))
for(i in 1:length(filesToRead)){
fileRead[[i]] <- read.delim(filesToRead[i],header=F,sep="\t")
colnames(fileRead[[i]]) <- c("GeneNames",basename(filesToRead[i]))
}
mergedTable <- NULL
for(i in fileRead){
if(is.null(mergedTable)){
mergedTable <- i
}else{
mergedTable <- merge(mergedTable,i,by=1,all=T)
}
print(nrow(mergedTable))
}
mergedTable[1:3,]
Annotation <- read.table("../ExpressionResults/Annotation.ann",sep="\t",h=T)
annotatedExpression <- merge(Annotation,mergedTable,by=1,all.x=F,all.y=T)
annotatedExpression[1:2,]
table(Annotation$Pathway)
summary(Annotation$Pathway)
correlation <- cor(annotatedExpression[,grep("ExpressionResults",colnames(annotatedExpression))])
image(correlation,axes=F)
axis(1,at=seq(0,1,length.out=6), colnames(minRep))
axis(2,at=seq(0,1,length.out=6), colnames(minRep))
setwd("~/Downloads/htqc/r_course/scripts")
filesToRead <- dir("../ExpressionResults/",pattern = "*\\.txt",full.names=T)
fileRead <- vector("list",length=length(filesToRead))
for(i in 1:length(filesToRead)){
fileRead[[i]] <- read.delim(filesToRead[i],header=F,sep="\t")
colnames(fileRead[[i]]) <- c("GeneNames",basename(filesToRead[i]))
}
mergedTable <- NULL
for(i in fileRead){
if(is.null(mergedTable)){
mergedTable <- i
}else{
mergedTable <- merge(mergedTable,i,by=1,all=T)
}
print(nrow(mergedTable))
}
mergedTable[1:3,]
Annotation <- read.table("../ExpressionResults/Annotation.ann",sep="\t",h=T)
annotatedExpression <- merge(Annotation,mergedTable,by=1,all.x=F,all.y=T)
annotatedExpression[1:2,]
table(Annotation$Pathway)
summary(Annotation$Pathway)
correlation <- cor(annotatedExpression[,grep("ExpressionResults",colnames(annotatedExpression))])
image(correlation,axes=F)
axis(1,at=seq(0,1,length.out=6), colnames(minRep))
axis(2,at=seq(0,1,length.out=6), colnames(minRep))
filesToRead <- dir("../ExpressionResults/",pattern = "*\\.txt",full.names=T)
fileRead <- vector("list",length=length(filesToRead))
for(i in 1:length(filesToRead)){
fileRead[[i]] <- read.delim(filesToRead[i],header=F,sep="\t")
colnames(fileRead[[i]]) <- c("GeneNames",basename(filesToRead[i]))
}
mergedTable <- NULL
for(i in fileRead){
if(is.null(mergedTable)){
mergedTable <- i
}else{
mergedTable <- merge(mergedTable,i,by=1,all=T)
}
print(nrow(mergedTable))
}
mergedTable[1:3,]
Annotation <- read.table("../ExpressionResults/Annotation.ann",sep="\t",h=T)
annotatedExpression <- merge(Annotation,mergedTable,by=1,all.x=F,all.y=T)
annotatedExpression[1:2,]
table(Annotation$Pathway)
summary(Annotation$Pathway)
correlation <- cor(annotatedExpression[,grep("ExpressionResults",colnames(annotatedExpression))])
image(correlation,axes=F)
axis(1,at=seq(0,1,length.out=6), colnames(minRep))
axis(2,at=seq(0,1,length.out=6), colnames(minRep))
boxplot(annotatedExpression[,grep("ExpressionResults",colnames(annotatedExpression))])
boxplot(annotatedExpression[,grep("ExpressionResults",colnames(annotatedExpression))],horiz=T)
boxplot(annotatedExpression[,grep("ExpressionResults",colnames(annotatedExpression))],horizontal=T)
boxplot(annotatedExpression[,grep("ExpressionResults",colnames(annotatedExpression))],horizontal=T,las=2)
boxplot(annotatedExpression[,grep("ExpressionResults",colnames(annotatedExpression))],
horizontal=T,las=2,names=gsub("ExpressionResults|\\.txt","",colnames(annotatedExpression)))
boxplot(annotatedExpression[,grep("ExpressionResults",colnames(annotatedExpression))],
horizontal=T,las=2,names=gsub("ExpressionResults|\\.txt","",annotatedExpression[,grep("ExpressionResults",colnames(annotatedExpression))]))
gsub("ExpressionResults|\\.txt","",annotatedExpression[,grep("ExpressionResults",colnames(annotatedExpression))])
boxplot(annotatedExpression[,grep("ExpressionResults",colnames(annotatedExpression))],
horizontal=T,las=2,names=gsub("ExpressionResults|\\.txt","",colnames(annotatedExpression[,grep("ExpressionResults",colnames(annotatedExpression))])))
render("scriptToConvertToNote.R")
render("markdownExample.Rmd")
