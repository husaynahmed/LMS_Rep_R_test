Start <- as.numeric(as.vector(RangesTable[, 2]))
End <- as.numeric(as.vector(RangesTable[, 3]))
RegionRanges <- GRanges(seqnames = Chromosomes, ranges = IRanges(start = Start,
end = End))
if (simple == FALSE) {
if (ncol(RangesTable) > 4) {
ID <- as.vector(RangesTable[, 4])
Score <- as.vector(RangesTable[, 5])
if (ncol(RangesTable) > 6) {
Strand <- rep("*", nrow(RangesTable))
RemainderColumn <- as.data.frame(RangesTable[,
-c(1:6)])
elementMetadata(RegionRanges) <- cbind(ID,
Score, Strand, RemainderColumn)
}
else {
elementMetadata(RegionRanges) <- cbind(ID,
Score)
}
}
}
}
if (!is.null(AllChr)) {
RegionRanges <- RegionRanges[seqnames(RegionRanges) %in%
AllChr]
seqlevels(RegionRanges, force = TRUE) <- AllChr
}
if (!is.null(ChrOfInterest)) {
RegionRanges <- RegionRanges[seqnames(RegionRanges) ==
ChrOfInterest]
}
return(RegionRanges)
}
readGRanges(files[1],simplify=T,skip=1)
readGRanges(files[1],simplify=T,skip=1,sep=",")
readGRanges <- function (LoadFile, AllChr = NULL, ChrOfInterest = NULL, simple = FALSE,
sepr = "\t", simplify = FALSE,skip=0)
{
if (class(LoadFile) == "GRanges") {
RegionRanges <- LoadFile
if (simplify) {
RegionRanges <- GRanges(seqnames(RegionRanges), ranges(RegionRanges))
}
}
else {
if (class(LoadFile) == "character") {
RangesTable <- read.delim(LoadFile, sep = sepr, header = TRUE,
comment = "#",skip=skip)
}
else if (class(LoadFile) == "matrix") {
RangesTable <- as.data.frame(LoadFile)
}
else {
RangesTable <- as.data.frame(LoadFile)
}
Chromosomes <- as.vector(RangesTable[, 2])
Start <- as.numeric(as.vector(RangesTable[, 3]))
End <- as.numeric(as.vector(RangesTable[, 4]))
RegionRanges <- GRanges(seqnames = Chromosomes, ranges = IRanges(start = Start,
end = End))
if (simple == FALSE) {
if (ncol(RangesTable) > 4) {
ID <- as.vector(RangesTable[, 1])
Score <- as.vector(RangesTable[, 7])
if (ncol(RangesTable) > 6) {
Strand <- rep("*", nrow(RangesTable))
RemainderColumn <- as.data.frame(RangesTable[,
-c(1:6)])
elementMetadata(RegionRanges) <- cbind(ID,
Score, Strand, RemainderColumn)
}
else {
elementMetadata(RegionRanges) <- cbind(ID,
Score)
}
}
}
}
if (!is.null(AllChr)) {
RegionRanges <- RegionRanges[seqnames(RegionRanges) %in%
AllChr]
seqlevels(RegionRanges, force = TRUE) <- AllChr
}
if (!is.null(ChrOfInterest)) {
RegionRanges <- RegionRanges[seqnames(RegionRanges) ==
ChrOfInterest]
}
return(RegionRanges)
}
readGRanges(files[1],simplify=T,skip=1,sep=",")
library(GenomicRanges)
readGRanges(files[1],simplify=T,skip=1,sep=",")
library(rtracklayer)
library(sogi)
files <- dir("/Users/tcarroll/Desktop/ingPhastcons/mmc7/",pattern="*.\\.csv",full.names=T)
readGRanges <- function (LoadFile, AllChr = NULL, ChrOfInterest = NULL, simple = FALSE,
sepr = "\t", simplify = FALSE,skip=1)
{
if (class(LoadFile) == "GRanges") {
RegionRanges <- LoadFile
if (simplify) {
RegionRanges <- GRanges(seqnames(RegionRanges), ranges(RegionRanges))
}
}
else {
if (class(LoadFile) == "character") {
RangesTable <- read.delim(LoadFile, sep = sepr, header = TRUE,
comment = "#",skip=skip)
}
else if (class(LoadFile) == "matrix") {
RangesTable <- as.data.frame(LoadFile)
}
else {
RangesTable <- as.data.frame(LoadFile)
}
Chromosomes <- as.vector(RangesTable[, 2])
Start <- as.numeric(as.vector(RangesTable[, 3]))
End <- as.numeric(as.vector(RangesTable[, 4]))
RegionRanges <- GRanges(seqnames = Chromosomes, ranges = IRanges(start = Start,
end = End))
if (simple == FALSE) {
if (ncol(RangesTable) > 4) {
ID <- as.vector(RangesTable[, 1])
Score <- as.vector(RangesTable[, 7])
if (ncol(RangesTable) > 6) {
Strand <- rep("*", nrow(RangesTable))
RemainderColumn <- as.data.frame(RangesTable[,
-c(1:6)])
elementMetadata(RegionRanges) <- cbind(ID,
Score, Strand, RemainderColumn)
}
else {
elementMetadata(RegionRanges) <- cbind(ID,
Score)
}
}
}
}
if (!is.null(AllChr)) {
RegionRanges <- RegionRanges[seqnames(RegionRanges) %in%
AllChr]
seqlevels(RegionRanges, force = TRUE) <- AllChr
}
if (!is.null(ChrOfInterest)) {
RegionRanges <- RegionRanges[seqnames(RegionRanges) ==
ChrOfInterest]
}
return(RegionRanges[RegionRnages$Score == 1])
}
SElist <- lapply(files,function(x)readGRanges(x,simplify=T))
readGRanges(files[1],simplify=T,skip=1,sep=",")
readGRanges(files[1],simplify=T,skip=1,sep=",")
readGRanges <- function (LoadFile, AllChr = NULL, ChrOfInterest = NULL, simple = FALSE,
sepr = "\t", simplify = FALSE,skip=1)
{
if (class(LoadFile) == "GRanges") {
RegionRanges <- LoadFile
if (simplify) {
RegionRanges <- GRanges(seqnames(RegionRanges), ranges(RegionRanges))
}
}
else {
if (class(LoadFile) == "character") {
RangesTable <- read.delim(LoadFile, sep = sepr, header = TRUE,
comment = "#",skip=skip)
}
else if (class(LoadFile) == "matrix") {
RangesTable <- as.data.frame(LoadFile)
}
else {
RangesTable <- as.data.frame(LoadFile)
}
Chromosomes <- as.vector(RangesTable[, 2])
Start <- as.numeric(as.vector(RangesTable[, 3]))
End <- as.numeric(as.vector(RangesTable[, 4]))
RegionRanges <- GRanges(seqnames = Chromosomes, ranges = IRanges(start = Start,
end = End))
if (simple == FALSE) {
if (ncol(RangesTable) > 4) {
ID <- as.vector(RangesTable[, 1])
Score <- as.vector(RangesTable[, 7])
if (ncol(RangesTable) > 6) {
Strand <- rep("*", nrow(RangesTable))
RemainderColumn <- as.data.frame(RangesTable[,
-c(1:6)])
elementMetadata(RegionRanges) <- cbind(ID,
Score, Strand, RemainderColumn)
}
else {
elementMetadata(RegionRanges) <- cbind(ID,
Score)
}
}
}
}
if (!is.null(AllChr)) {
RegionRanges <- RegionRanges[seqnames(RegionRanges) %in%
AllChr]
seqlevels(RegionRanges, force = TRUE) <- AllChr
}
if (!is.null(ChrOfInterest)) {
RegionRanges <- RegionRanges[seqnames(RegionRanges) ==
ChrOfInterest]
}
return(RegionRanges[RegionRanges$Score == 1])
}
readGRanges(files[1],simplify=T,skip=1,sep=",")
readGRanges(files[2],simplify=T,skip=1,sep=",")
library(rtracklayer)
library(sogi)
files <- dir("/Users/tcarroll/Desktop/ingPhastcons/mmc7/",pattern="*.\\.csv",full.names=T)
readGRanges <- function (LoadFile, AllChr = NULL, ChrOfInterest = NULL, simple = FALSE,
sepr = "\t", simplify = FALSE,skip=1)
{
if (class(LoadFile) == "GRanges") {
RegionRanges <- LoadFile
if (simplify) {
RegionRanges <- GRanges(seqnames(RegionRanges), ranges(RegionRanges))
}
}
else {
if (class(LoadFile) == "character") {
RangesTable <- read.delim(LoadFile, sep = sepr, header = TRUE,
comment = "#",skip=skip)
}
else if (class(LoadFile) == "matrix") {
RangesTable <- as.data.frame(LoadFile)
}
else {
RangesTable <- as.data.frame(LoadFile)
}
Chromosomes <- as.vector(RangesTable[, 2])
Start <- as.numeric(as.vector(RangesTable[, 3]))
End <- as.numeric(as.vector(RangesTable[, 4]))
RegionRanges <- GRanges(seqnames = Chromosomes, ranges = IRanges(start = Start,
end = End))
if (simple == FALSE) {
if (ncol(RangesTable) > 4) {
ID <- as.vector(RangesTable[, 1])
Score <- as.vector(RangesTable[, 7])
if (ncol(RangesTable) > 6) {
Strand <- rep("*", nrow(RangesTable))
RemainderColumn <- as.data.frame(RangesTable[,
-c(1:6)])
elementMetadata(RegionRanges) <- cbind(ID,
Score, Strand, RemainderColumn)
}
else {
elementMetadata(RegionRanges) <- cbind(ID,
Score)
}
}
}
}
if (!is.null(AllChr)) {
RegionRanges <- RegionRanges[seqnames(RegionRanges) %in%
AllChr]
seqlevels(RegionRanges, force = TRUE) <- AllChr
}
if (!is.null(ChrOfInterest)) {
RegionRanges <- RegionRanges[seqnames(RegionRanges) ==
ChrOfInterest]
}
return(RegionRanges[RegionRnages$Score == 1])
}
SElist <- lapply(files,function(x)readGRanges(x,simplify=T,skip=1,sep=","))
files <- dir("/Users/tcarroll/Desktop/ingPhastcons/mmc7/",pattern="*.\\.csv",full.names=T)
readGRanges <- function (LoadFile, AllChr = NULL, ChrOfInterest = NULL, simple = FALSE,
sepr = "\t", simplify = FALSE,skip=1)
{
if (class(LoadFile) == "GRanges") {
RegionRanges <- LoadFile
if (simplify) {
RegionRanges <- GRanges(seqnames(RegionRanges), ranges(RegionRanges))
}
}
else {
if (class(LoadFile) == "character") {
RangesTable <- read.delim(LoadFile, sep = sepr, header = TRUE,
comment = "#",skip=skip)
}
else if (class(LoadFile) == "matrix") {
RangesTable <- as.data.frame(LoadFile)
}
else {
RangesTable <- as.data.frame(LoadFile)
}
Chromosomes <- as.vector(RangesTable[, 2])
Start <- as.numeric(as.vector(RangesTable[, 3]))
End <- as.numeric(as.vector(RangesTable[, 4]))
RegionRanges <- GRanges(seqnames = Chromosomes, ranges = IRanges(start = Start,
end = End))
if (simple == FALSE) {
if (ncol(RangesTable) > 4) {
ID <- as.vector(RangesTable[, 1])
Score <- as.vector(RangesTable[, 7])
if (ncol(RangesTable) > 6) {
Strand <- rep("*", nrow(RangesTable))
RemainderColumn <- as.data.frame(RangesTable[,
-c(1:6)])
elementMetadata(RegionRanges) <- cbind(ID,
Score, Strand, RemainderColumn)
}
else {
elementMetadata(RegionRanges) <- cbind(ID,
Score)
}
}
}
}
if (!is.null(AllChr)) {
RegionRanges <- RegionRanges[seqnames(RegionRanges) %in%
AllChr]
seqlevels(RegionRanges, force = TRUE) <- AllChr
}
if (!is.null(ChrOfInterest)) {
RegionRanges <- RegionRanges[seqnames(RegionRanges) ==
ChrOfInterest]
}
return(RegionRanges[RegionRanges$Score == 1])
}
SElistHuman <- lapply(files,function(x)readGRanges(x,skip=1,sep=","))
SElistHuman <- lapply(files[1:2],function(x)readGRanges(x,skip=1,sep=","))
SElistHuman <- lapply(files[1:2],function(x)readGRanges(x,skip=1,sep=","))
names(SElistHuman) <- gsub("\\.csv","",basename(files[1:2]))
SElistHuman
SElistHuman <- lapply(files[1:2],function(x)readGRanges(x,skip=1,sep=","))
names(SElistHuman) <- gsub("\\.csv","",basename(files[1:2]))
SElistHuman2 <- lapply(SElistHuman,function(x)GRanges(seqnames(x),IRanges(start(x)-(width(x)*2),end(x)+(width(x)*2)),strand="+"))
SEListHuman2
SElistHuman2
SElistHuman <- lapply(files[1:2],function(x)readGRanges(x,skip=1,sep=","))
names(SElistHuman) <- gsub("\\.csv","",basename(files[1:2]))
SElistHuman2 <- lapply(SElistHuman,function(x)GRanges(seqnames(x),IRanges(start(x)-(width(x)*2),end(x)+(width(x)*2)),strand="+"))
extendAllSElistHuman <- reduce(unlist(GRangesList(SElistHuman2)))
allSE <- unlist(GRangesList(SElistHuman))
elementMetadata(SElistHuman) <- data.frame(name=names(SElistHuman))
SElistHuman
GRangesList(SElistHuman)
files <- dir("/Users/tcarroll/Desktop/ingPhastcons/mmc7/",pattern="*.\\.csv",full.names=T)
readGRanges <- function (LoadFile, AllChr = NULL, ChrOfInterest = NULL, simple = FALSE,
sepr = "\t", simplify = FALSE,skip=1)
{
if (class(LoadFile) == "GRanges") {
RegionRanges <- LoadFile
if (simplify) {
RegionRanges <- GRanges(seqnames(RegionRanges), ranges(RegionRanges))
}
}
else {
if (class(LoadFile) == "character") {
RangesTable <- read.delim(LoadFile, sep = sepr, header = TRUE,
comment = "#",skip=skip)
}
else if (class(LoadFile) == "matrix") {
RangesTable <- as.data.frame(LoadFile)
}
else {
RangesTable <- as.data.frame(LoadFile)
}
Chromosomes <- as.vector(RangesTable[, 2])
Start <- as.numeric(as.vector(RangesTable[, 3]))
End <- as.numeric(as.vector(RangesTable[, 4]))
RegionRanges <- GRanges(seqnames = Chromosomes, ranges = IRanges(start = Start,
end = End))
if (simple == FALSE) {
if (ncol(RangesTable) > 4) {
ID <- as.vector(RangesTable[, 1])
Score <- as.vector(RangesTable[, 7])
elementMetadata(RegionRanges) <- cbind(ID,
Score)
}
}
}
if (!is.null(AllChr)) {
RegionRanges <- RegionRanges[seqnames(RegionRanges) %in%
AllChr]
seqlevels(RegionRanges, force = TRUE) <- AllChr
}
if (!is.null(ChrOfInterest)) {
RegionRanges <- RegionRanges[seqnames(RegionRanges) ==
ChrOfInterest]
}
return(RegionRanges[RegionRanges$Score == 1])
}
SElistHuman <- lapply(files[1:2],function(x)readGRanges(x,skip=1,sep=","))
names(SElistHuman) <- gsub("\\.csv","",basename(files[1:2]))
SElistHuman2 <- lapply(SElistHuman,function(x)GRanges(seqnames(x),IRanges(start(x)-(width(x)*2),end(x)+(width(x)*2)),strand="+"))
extendAllSElistHuman <- reduce(unlist(GRangesList(SElistHuman2)))
allSE <- unlist(GRangesList(SElistHuman))
allSE
elementMetadata(allSEHuman) <- data.frame(name=names(allSEHuman))
allSEHuman <- unlist(GRangesList(SElistHuman))
elementMetadata(allSEHuman) <- data.frame(name=names(allSEHuman))
allSEHuman
library(rtracklayer)
library(sogi)
files <- dir("/Users/tcarroll/Desktop/ingPhastcons/mmc7/",pattern="*.\\.csv",full.names=T)
readGRanges <- function (LoadFile, AllChr = NULL, ChrOfInterest = NULL, simple = FALSE,
sepr = "\t", simplify = FALSE,skip=1)
{
if (class(LoadFile) == "GRanges") {
RegionRanges <- LoadFile
if (simplify) {
RegionRanges <- GRanges(seqnames(RegionRanges), ranges(RegionRanges))
}
}
else {
if (class(LoadFile) == "character") {
RangesTable <- read.delim(LoadFile, sep = sepr, header = TRUE,
comment = "#",skip=skip)
}
else if (class(LoadFile) == "matrix") {
RangesTable <- as.data.frame(LoadFile)
}
else {
RangesTable <- as.data.frame(LoadFile)
}
Chromosomes <- as.vector(RangesTable[, 2])
Start <- as.numeric(as.vector(RangesTable[, 3]))
End <- as.numeric(as.vector(RangesTable[, 4]))
RegionRanges <- GRanges(seqnames = Chromosomes, ranges = IRanges(start = Start,
end = End))
if (simple == FALSE) {
if (ncol(RangesTable) > 4) {
ID <- as.vector(RangesTable[, 1])
Score <- as.vector(RangesTable[, 7])
elementMetadata(RegionRanges) <- cbind(ID,
Score)
}
}
}
if (!is.null(AllChr)) {
RegionRanges <- RegionRanges[seqnames(RegionRanges) %in%
AllChr]
seqlevels(RegionRanges, force = TRUE) <- AllChr
}
if (!is.null(ChrOfInterest)) {
RegionRanges <- RegionRanges[seqnames(RegionRanges) ==
ChrOfInterest]
}
return(RegionRanges[RegionRanges$Score == 1])
}
SElistHuman <- lapply(files[1:2],function(x)readGRanges(x,skip=1,sep=","))
names(SElistHuman) <- gsub("\\.csv","",basename(files[1:2]))
SElistHuman2 <- lapply(SElistHuman,function(x)GRanges(seqnames(x),IRanges(start(x)-(width(x)*2),end(x)+(width(x)*2)),strand="+"))
extendAllSElistHuman <- reduce(unlist(GRangesList(SElistHuman2)))
allSEHuman <- unlist(GRangesList(SElistHuman))
elementMetadata(allSEHuman) <- data.frame(name=names(allSEHuman))
allSEHuman
library("BSgenome.Hsapiens.UCSC.hg19", lib.loc="~/Library/R/3.1/library")
library("BSgenome.Hsapiens.UCSC.hg19")
library(devtools)
#install_github("ThomasCarroll/rtracktables",subdir="tracktables")
#library(tracktables)
library(Biostrings)
library("BSgenome.Hsapiens.UCSC.hg19")
library(MotifDb)
library(Biostrings)
library(seqLogo)
library(ggplot2)
mdb.ctcf <- MotifDb [grep ('ctcf', values (MotifDb)$geneSymbol, ignore.case=TRUE)]
motifScores_DP_thy_Enh_MaxHuman <- makeMotifScoreRle(mdb.ctcf[[1]],extendAllSE,Hsapiens,1000,removeRand=TRUE,strandScore="max")
mdb.ctcf <- MotifDb [grep ('ctcf', values (MotifDb)$geneSymbol, ignore.case=TRUE)]
motifScores_DP_thy_Enh_MaxHuman <- makeMotifScoreRle(mdb.ctcf[[1]],extendAllSElistHuman,Hsapiens,1000,removeRand=TRUE,strandScore="max")
ctcf_all_motifNew_Human <- regionPlot(motifScores_DP_thy_Enh_MaxHuman,allSEHuman,nOfWindows=100,style="percentOfRegion",format="rlelist",FragmentLength=130,distanceAround = 100)
gts <- c(as.list(unique(names(allSEHuman))))
names(gts) <- c(unique(names(allSEHuman)))
gts
p2 <- plotRegion(ctcf_all_motifNew_Human,gts=gts)
p2 <- p2+facet_wrap(~Group)+aes(colour=Group)
nOfWindows <- 100
p2 <- plotRegion(ctcf_all_motifNew_Human,gts=gts)
p2 <- p2+facet_wrap(~Group)+aes(colour=Group)
p2
load("/Users/tcarroll/Downloads/superenhancers.RData")
files <- dir("/Users/tcarroll/Downloads/VladSeitan/",pattern="*.bed\\.csv",full.names=T)
SElist <- lapply(files,function(x)ChIPQC:::GetGRanges(x,simplify=T))
SElist <- c(list(DP_thymocytes),list(ESCs),SElist)
names(SElist) <- c("Ing_DP","Ing_ESC",gsub("\\.bed\\.csv","",basename(files)))
SElist2 <- lapply(SElist,function(x)GRanges(seqnames(x),IRanges(start(x)-(width(x)*2),end(x)+(width(x)*2)),strand="+"))
extendAllSE <- reduce(unlist(GRangesList(SElist2)))
SElist[[1]] <- ChIPQC:::GetGRanges(SElist[[1]],simplify=T)
SElist[[2]] <- ChIPQC:::GetGRanges(SElist[[2]],simplify=T)
allSE <- unlist(GRangesList(SElist))
elementMetadata(allSE) <- data.frame(name=names(allSE))
allSE
library(devtools)
#install_github("ThomasCarroll/rtracktables",subdir="tracktables")
library(tracktables)
library(Biostrings)
library(BSgenome.Mmusculus.UCSC.mm9)
library(MotifDb)
library(Biostrings)
library(seqLogo)
library(ggplot2)
gts <- c(as.list(unique(names(allSE))),list(unique(names(allSE))[-c(1,2)]))
names(gts) <- c(unique(names(allSE)),"All_SE")
mdb.ctcf <- MotifDb [grep ('ctcf', values (MotifDb)$geneSymbol, ignore.case=TRUE)]
motifScores_DP_thy_Enh_Max3 <- makeMotifScoreRle(mdb.ctcf[[1]],extendAllSE,Mmusculus,1000,removeRand=TRUE,strandScore="max")
ctcf_all_motifNew <- regionPlot(motifScores_DP_thy_Enh_Max3,allSE,nOfWindows=100,style="percentOfRegion",format="rlelist",FragmentLength=130,distanceAround = 100)
p2M <- plotRegion(ctcf_all_motifNew,gts=gts)
p2M <- p2+facet_wrap(~Group)+aes(colour=Group)
p2m
p2M
p2M
p2M <- plotRegion(ctcf_all_motifNew,gts=gts)
p2M <- p2M+facet_wrap(~Group)+aes(colour=Group)
p2M
p2
p2M
p2
